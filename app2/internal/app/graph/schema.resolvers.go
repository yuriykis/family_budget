package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"app/internal/app/graph/model"
	mainModel "app/internal/app/model"
	"context"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (*model.User, error) {
	user := mainModel.User{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Password:  input.Password,
	}
	userId, err := r.store.User().Create(user)
	if err != nil {
		return nil, err
	}
	user.ID = userId
	return &model.User{
		ID:        fmt.Sprintf("%d", user.ID),
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
	}, nil

}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	userId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	user := mainModel.User{
		ID:        int(userId),
		FirstName: *input.FirstName,
		LastName:  *input.LastName,
		Email:     *input.Email,
		Password:  *input.Password,
	}
	err = r.store.User().Update(user)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:        fmt.Sprintf("%d", user.ID),
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*bool, error) {
	userId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	err = r.store.User().Delete(int(userId))
	if err != nil {
		return nil, err
	}
	return &[]bool{true}[0], nil
}

// CreateBudget is the resolver for the createBudget field.
func (r *mutationResolver) CreateBudget(ctx context.Context, input model.NewBudgetInput) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: CreateBudget - createBudget"))
}

// UpdateBudget is the resolver for the updateBudget field.
func (r *mutationResolver) UpdateBudget(ctx context.Context, id string, input model.UpdateBudgetInput) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: UpdateBudget - updateBudget"))
}

// DeleteBudget is the resolver for the deleteBudget field.
func (r *mutationResolver) DeleteBudget(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteBudget - deleteBudget"))
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategoryInput) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: CreateCategory - createCategory"))
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input model.UpdateCategoryInput) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - deleteCategory"))
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.NewTransactionInput) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: CreateTransaction - createTransaction"))
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, id string, input model.UpdateTransactionInput) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: UpdateTransaction - updateTransaction"))
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTransaction - deleteTransaction"))
}

// CreateUserBudget is the resolver for the createUserBudget field.
func (r *mutationResolver) CreateUserBudget(ctx context.Context, input model.NewUserBudgetInput) (*model.UserBudget, error) {
	panic(fmt.Errorf("not implemented: CreateUserBudget - createUserBudget"))
}

// UpdateUserBudget is the resolver for the updateUserBudget field.
func (r *mutationResolver) UpdateUserBudget(ctx context.Context, id string, input model.UpdateUserBudgetInput) (*model.UserBudget, error) {
	panic(fmt.Errorf("not implemented: UpdateUserBudget - updateUserBudget"))
}

// DeleteUserBudget is the resolver for the deleteUserBudget field.
func (r *mutationResolver) DeleteUserBudget(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUserBudget - deleteUserBudget"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	user, err := r.store.User().Find(intID)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:        fmt.Sprintf("%d", user.ID),
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
	}, nil

}

// Budget is the resolver for the budget field.
func (r *queryResolver) Budget(ctx context.Context, id string) (*model.Budget, error) {
	panic(fmt.Errorf("not implemented: Budget - budget"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Transaction is the resolver for the transaction field.
func (r *queryResolver) Transaction(ctx context.Context, id string) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented: Transaction - transaction"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
