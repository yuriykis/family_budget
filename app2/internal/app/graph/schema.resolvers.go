package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"app/internal/app/graph/model"
	mainModel "app/internal/app/model"
	"context"
	"fmt"
	"strconv"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUserInput) (*model.User, error) {
	user := mainModel.User{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Password:  input.Password,
	}
	userId, err := r.store.User().Create(user)
	if err != nil {
		return nil, err
	}
	user.ID = userId
	return &model.User{
		ID:        fmt.Sprintf("%d", user.ID),
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
	}, nil

}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	userId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	user := mainModel.User{
		ID:        int(userId),
		FirstName: *input.FirstName,
		LastName:  *input.LastName,
		Email:     *input.Email,
		Password:  *input.Password,
	}
	err = r.store.User().Update(user)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:        fmt.Sprintf("%d", user.ID),
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*bool, error) {
	userId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	err = r.store.User().Delete(int(userId))
	if err != nil {
		return nil, err
	}
	return &[]bool{true}[0], nil
}

// CreateBudget is the resolver for the createBudget field.
func (r *mutationResolver) CreateBudget(ctx context.Context, input model.NewBudgetInput) (*model.Budget, error) {
	// create budget
	budget := mainModel.Budget{
		Name:        input.Name,
		Description: input.Description,
		Amount:      input.Amount,
	}
	// get user id from context
	userId := ctx.Value("userId").(int)
	budgetId, err := r.store.Budget().Create(budget, uint(userId))
	if err != nil {
		return nil, err
	}
	budget.ID = budgetId
	return &model.Budget{
		ID:          fmt.Sprintf("%d", budget.ID),
		Name:        budget.Name,
		Description: budget.Description,
		Amount:      budget.Amount,
	}, nil
}

// UpdateBudget is the resolver for the updateBudget field.
func (r *mutationResolver) UpdateBudget(ctx context.Context, id string, input model.UpdateBudgetInput) (*model.Budget, error) {
	budgetId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	budget := mainModel.Budget{
		ID:          int(budgetId),
		Name:        *input.Name,
		Description: *input.Description,
		Amount:      *input.Amount,
	}
	err = r.store.Budget().Edit(budget)
	if err != nil {
		return nil, err
	}
	return &model.Budget{
		ID:          fmt.Sprintf("%d", budget.ID),
		Name:        budget.Name,
		Description: budget.Description,
		Amount:      budget.Amount,
	}, nil
}

// DeleteBudget is the resolver for the deleteBudget field.
func (r *mutationResolver) DeleteBudget(ctx context.Context, id string) (*bool, error) {
	budgetId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	err = r.store.Budget().Delete(int(budgetId))
	if err != nil {
		return nil, err
	}
	return &[]bool{true}[0], nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategoryInput) (*model.Category, error) {
	category := mainModel.Category{
		Name:        input.Name,
		Description: input.Description,
	}
	categoryId, err := r.store.Category().Create(category)
	if err != nil {
		return nil, err
	}
	category.ID = categoryId
	return &model.Category{
		ID:          fmt.Sprintf("%d", category.ID),
		Name:        category.Name,
		Description: category.Description,
	}, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, id string, input model.UpdateCategoryInput) (*model.Category, error) {
	categoryId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	category := mainModel.Category{
		ID:          int(categoryId),
		Name:        *input.Name,
		Description: *input.Description,
	}
	err = r.store.Category().Edit(category)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:          fmt.Sprintf("%d", category.ID),
		Name:        category.Name,
		Description: category.Description,
	}, nil
}

// DeleteCategory is the resolver for the deleteCategory field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (*bool, error) {
	categoryId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	err = r.store.Category().Delete(int(categoryId))
	if err != nil {
		return nil, err
	}
	return &[]bool{true}[0], nil
}

// CreateTransaction is the resolver for the createTransaction field.
func (r *mutationResolver) CreateTransaction(ctx context.Context, input model.NewTransactionInput) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateTransaction is the resolver for the updateTransaction field.
func (r *mutationResolver) UpdateTransaction(ctx context.Context, id string, input model.UpdateTransactionInput) (*model.Transaction, error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteTransaction is the resolver for the deleteTransaction field.
func (r *mutationResolver) DeleteTransaction(ctx context.Context, id string) (*bool, error) {
	transactionId, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	err = r.store.Transaction().Delete(int(transactionId))
	if err != nil {
		return nil, err
	}
	return &[]bool{true}[0], nil
}

// CreateUserBudget is the resolver for the createUserBudget field.
func (r *mutationResolver) CreateUserBudget(ctx context.Context, input model.NewUserBudgetInput) (*model.UserBudget, error) {
	panic(fmt.Errorf("not implemented"))
}

// UpdateUserBudget is the resolver for the updateUserBudget field.
func (r *mutationResolver) UpdateUserBudget(ctx context.Context, id string, input model.UpdateUserBudgetInput) (*model.UserBudget, error) {
	panic(fmt.Errorf("not implemented"))
}

// DeleteUserBudget is the resolver for the deleteUserBudget field.
func (r *mutationResolver) DeleteUserBudget(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	user, err := r.store.User().Find(intID)
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:        fmt.Sprintf("%d", user.ID),
		FirstName: user.FirstName,
		LastName:  user.LastName,
		Email:     user.Email,
	}, nil

}

// Budget is the resolver for the budget field.
func (r *queryResolver) Budget(ctx context.Context, id string) (*model.Budget, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	budget, err := r.store.Budget().Find(intID)
	if err != nil {
		return nil, err
	}
	return &model.Budget{
		ID:   fmt.Sprintf("%d", budget.ID),
		Name: budget.Name,
	}, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	category, err := r.store.Category().Find(intID)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		ID:   fmt.Sprintf("%d", category.ID),
		Name: category.Name,
	}, nil
}

// Transaction is the resolver for the transaction field.
func (r *queryResolver) Transaction(ctx context.Context, id string) (*model.Transaction, error) {
	intID, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}
	transaction, err := r.store.Transaction().Find(intID)
	if err != nil {
		return nil, err
	}
	return &model.Transaction{
		ID:     fmt.Sprintf("%d", transaction.ID),
		Title:  transaction.Title,
		Amount: transaction.Amount,
		Type:   transaction.Type,
	}, nil

}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
